<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="20.11.1.2">
<procedure name="main">
<interface/>
<body>
<c></c>
<l>info_framegrabber ('GigEVision2', 'device', DeviceInfo, DeviceInfoValues)</l>
<l>tuple_regexp_select (DeviceInfoValues, 'MechEyeProLEnhanced', MmindDevice) </l>
<l>if (not |MmindDevice|)</l>
<l>    stop()</l>
<l>endif</l>
<l>open_framegrabber ('GigEVision2', 1, 1, 0, 0, 0, 0, 'default', -1, 'default', -1, 'false', 'default', MmindDevice[0], 0, -1, AcqHandle)</l>
<c></c>
<c></c>
<l>all_error_index := []</l>
<l>all_error_message := []</l>
<c></c>
<l>count_write_object_model_3d_error := 0</l>
<l>count_write_image_error := 0</l>
<l>count_grab_data_error := 0</l>
<l>other_error := []</l>
<c></c>
<l>run_times := 10000</l>
<c></c>
<l>cur_times := 0</l>
<c></c>
<l>while(cur_times &lt; run_times)</l>
<l>try</l>
<l>    cur_times := cur_times + 1</l>
<l>    set_framegrabber_param (AcqHandle, 'grab_timeout', 8000)</l>
<l>    set_framegrabber_param (AcqHandle, 'UserSetDefault', 'default')</l>
<l>    set_framegrabber_param (AcqHandle, '[Stream]GevStreamMaxPacketGaps', 500)</l>
<c>    </c>
<l>    set_framegrabber_param (AcqHandle, 'create_objectmodel3d', 'enable')</l>
<l>    set_framegrabber_param (AcqHandle, 'add_objectmodel3d_overlay_attrib', 'enable')</l>
<c>    </c>
<l>    set_framegrabber_param (AcqHandle, 'DeviceScanType', 'Areascan')</l>
<l>    set_framegrabber_param (AcqHandle, 'Scan2DExposureMode', 'Timed')</l>
<l>    set_framegrabber_param (AcqHandle, 'Scan2DExposureTime', 100)</l>
<c>    </c>
<l>    grab_image (Image2d, AcqHandle)</l>
<l>    write_image(Image2d, 'bmp', 0, 'Image2d')</l>
<l>    wait_seconds(3)</l>
<c></c>
<l>    set_framegrabber_param (AcqHandle, 'DeviceScanType', 'Areascan3D')</l>
<l>    set_framegrabber_param (AcqHandle, 'Scan3DExposureCount', 1)</l>
<l>    set_framegrabber_param (AcqHandle, 'Scan3DExposureTime', 5)</l>
<c>    </c>
<l>    grab_data(Image3d, Region, Contur, AcqHandle, ObjectModel3D)</l>
<c>    </c>
<l>    get_object_model_3d_params(ObjectModel3D, 'num_points', NumOfPoints)</l>
<c></c>
<l>    if(NumOfPoints != 0)</l>
<l>        write_object_model_3d (ObjectModel3D, 'ply', 'PointCloud.ply', [], [])</l>
<l>    endif</l>
<c></c>
<l>    wait_seconds(3)</l>
<c>    </c>
<c>    </c>
<l>catch (Exception)</l>
<c>    </c>
<l>        dev_get_exception_data (Exception, 'operator', msg)</l>
<c>        </c>
<l>        if (msg == 'write_object_model_3d')</l>
<l>            count_write_object_model_3d_error := count_write_object_model_3d_error + 1</l>
<c>        </c>
<l>        elseif (msg == 'grab_data')</l>
<l>            count_grab_data_error := count_grab_data_error + 1</l>
<c>        </c>
<l>        elseif (msg == 'write_image')</l>
<l>            count_write_image_error := count_write_image_error + 1</l>
<l>        else</l>
<l>            tuple_insert(other_error, 0, msg, other_error)</l>
<c></c>
<l>        endif</l>
<c>        </c>
<l>        tuple_insert(all_error_index, 0, cur_times, all_error_index)</l>
<l>        tuple_insert(all_error_message, 0, Exception, all_error_message)</l>
<l>endtry</l>
<l>endwhile</l>
<c></c>
<c></c>
<l>close_framegrabber (AcqHandle)</l>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="addOffset">
<interface/>
<body>
<l>convert_image_type (x, rReal, 'real')</l>
<l>scale_image (rReal, rRealWithOffest, 1, offest)</l>
<l>scale_image (rRealWithOffest, rRealWithOffest, scale, 0)</l>
<l>return ()</l>
</body>
<docu id="addOffset">
<parameters/>
</docu>
</procedure>
<procedure name="decode">
<interface>
<io>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="DecodedX" base_type="iconic" dimension="0"/>
<par name="DecodedY" base_type="iconic" dimension="0"/>
<par name="DecodedZ" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Scale" base_type="ctrl" dimension="0"/>
<par name="Offset" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c></c>
<l>convert_image_type (X, xReal, 'real')</l>
<l>scale_image (xReal, DecodedX, Scale, 0)</l>
<l>scale_image (DecodedX, DecodedX, 1, Offset)</l>
<c></c>
<l>convert_image_type (Y, yReal, 'real')</l>
<l>scale_image (yReal, DecodedY, Scale, 0)</l>
<l>scale_image (DecodedY, DecodedY, 1, Offset)</l>
<c></c>
<l>convert_image_type (Z, zReal, 'real')</l>
<l>scale_image (zReal, DecodedZ, Scale, 0)</l>
<l>scale_image (DecodedZ, DecodedZ, 1, Offset)</l>
<l>return ()</l>
</body>
<docu id="decode">
<parameters>
<parameter id="DecodedX"/>
<parameter id="DecodedY"/>
<parameter id="DecodedZ"/>
<parameter id="Offset"/>
<parameter id="Scale"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
</hdevelop>
